#Scripted effects relating to childhood

#####################################################################
# EFFECT LIST
#####################################################################
# !!! Remember to add all new effects with a short description here !!!

#get_guardian_event_target_effect
#save_good_character_effect
	#Save a relation scope for the child, use the arguments:
	#RELATION = friend
	#RELATION = crush
	#RELATION = bully
	#RELATION = victim

######################################################################
# EFFECTS
######################################################################


#Get a child's Guardian, or alternatively a suitable stand-in, since the event relies on an adult being present
get_guardian_scope_effect = {
	if = {
		limit = {
			any_relation = {
				type = guardian
				always = yes
			}
		}
		random_relation = {
			type = guardian
			save_scope_as = guardian
		}
	}
	if = {
		limit = {
			NOT = { exists = scope:guardian }
			is_ruler = yes
			any_parent = {
				is_adult = yes
				is_ai = yes
				is_in_the_same_court_as = root
				is_available = yes
			}
		}
		random_parent = {
			limit = {
				is_adult = yes
				is_ai = yes
				is_in_the_same_court_as = root
				is_available = yes
			}
			save_scope_as = guardian
		}
	}
	if = {
		limit = {
			NOT = { exists = scope:guardian }
			is_ruler = yes
			any_courtier_or_guest = {
				is_adult = yes
				is_ai = yes
				is_available = yes
			}
		}
		random_courtier_or_guest = {
			limit = {
				is_adult = yes
				is_ai = yes
				is_available = yes
			}
			save_scope_as = guardian
		}
	}
	if = {
		limit = {
			NOT = { exists = scope:guardian }
			any_parent = {
				is_ai = yes
				is_available = yes
			}
		}
		random_parent = {
			limit = {
				is_in_the_same_court_as = root
				is_ai = yes
				is_available = yes
			}
			alternative_limit = {
				is_ai = yes
				is_available = yes
			}
			save_scope_as = guardian
		}
	}
	if = {
		limit = {
			NOT = { exists = scope:guardian }
			any_sibling = {
				is_ai = yes
				is_adult = yes
				is_available = yes
			}
		}
		random_sibling = {
			limit = {
				is_ai = yes
				is_adult = yes
				is_available = yes
			}
			limit = {
				is_ai = yes
				is_adult = yes
				is_in_the_same_court_as = root
				is_available = yes			
			}
			save_scope_as = guardian
		}
	}
	if = {
		limit = {
			NOT = { exists = scope:guardian }
			exists = liege
			liege = {
				any_courtier_or_guest = {
					is_ai = yes
					is_adult = yes
					is_available = yes
				}
			}
		}
		liege = {
			random_courtier_or_guest = {
				limit = {
					is_ai = yes
					is_adult = yes
					is_available = yes
				}
				save_scope_as = guardian
			}
		}
	}
	if = {
		limit = {
			NOT = { exists = scope:guardian }
			exists = liege
			liege = {
				is_adult = yes
				is_ai = yes
				is_available = yes
			}
		}
		liege = {
			save_scope_as = guardian
		}
	}
	if = { #Close to last resort
		limit = {
			NOT = { exists = scope:guardian }
			any_ruler = {
				is_ai = yes
				culture = root.culture
				faith = root.faith
				is_available = yes
			}
		}
		random_ruler = {
			limit = {
				is_ai = yes
				culture = root.culture
				faith = root.faith
				is_available = yes
			}
			save_scope_as = guardian
		}
	}
	if = {
		limit = {
			NOT = { exists = scope:guardian }
			any_ruler = {
				is_ai = yes
				is_available = yes
				OR = {
					culture = root.culture
					faith = root.faith
				}
			}
		}
		debug_log = "Resorted to last resort when finding guardian for child"
		debug_log_scopes = yes
		random_ruler = {
			limit = {
				is_ai = yes
				is_available = yes
				OR = {
					culture = root.culture
					faith = root.faith
				}
			}
			save_scope_as = guardian
		}
	}
	if = {
		limit = {
			NOT = { exists = scope:guardian }
			any_ruler = {
				is_ai = yes
				is_available = yes
			}
		}
		debug_log = "Resorted to absolute last resort when finding guardian for child"
		debug_log_scopes = yes
		random_ruler = {
			limit = {
				is_ai = yes
				is_available = yes
			}
			save_scope_as = guardian
		}
	}
}


#Save a relation scope for the child, use the arguments:
	#RELATION =
	#SCOPE =
save_good_character_effect = {
	#Make sure that this list prioritizes other child vassals/heirs when the child being bullied is a player or player heir.
	save_temporary_scope_value_as = {
		name = $SCOPE$_relation
		value = yes
	}
	if = {
		limit = {
			NOT = { exists = scope:$RELATION$ }
			is_landed = yes
		}
		every_vassal = {
			limit = {
				save_good_$RELATION$_character_trigger_check = yes
			}
			add_to_list = good_child_relation_character
		}
	}
	if = {
		limit = {
			is_landed = yes
			NOT = { exists = scope:$RELATION$ }
		}
		every_vassal = {
			limit = {
				any_child = { save_good_$RELATION$_character_trigger_check = yes }
			}
			every_child = {
				limit = {
					save_good_$RELATION$_character_trigger_check = yes
				}
				add_to_list = good_child_relation_character
			}
		}
	}
	if = {
		limit = {
			is_landed = yes
			NOT = { exists = scope:$RELATION$ }
		}
		every_courtier = {
			limit = {
				save_good_$RELATION$_character_trigger_check = yes
			}
			add_to_list = good_child_relation_character
		}
	}
	if = {
		limit = {
			is_landed = yes
			NOT = { exists = scope:$RELATION$ }
			exists = liege
			NOT = { this = liege }
		}
		liege = {
			every_vassal = {
				limit = {
					save_good_$RELATION$_character_trigger_check = yes
				}
				add_to_list = good_child_relation_character
			}
		}
	}
	if = {
		limit = {
			is_landed = yes
			NOT = { exists = scope:$RELATION$ }
			exists = liege
			NOT = { this = liege }
		}
		liege = {
			every_vassal = {
				limit = {
					any_child = {
						save_good_$RELATION$_character_trigger_check = yes
					}
				}
				every_child = {
					limit = {
						save_good_$RELATION$_character_trigger_check = yes
					}
					add_to_list = good_child_relation_character
				}
			}
		}
	}
	if = {
		limit = {
			is_landed = no
			NOT = { exists = scope:$RELATION$ }
			OR = {
				has_father = no
				father = { is_landed = no }
			}
			OR = {
				has_mother = no
				mother = { is_landed = no }
			}
			exists = liege
			NOT = { this = liege }
		}
		liege = {
			every_vassal = {
				limit = {
					save_good_$RELATION$_character_trigger_check = yes
				}
				add_to_list = good_child_relation_character
			}
		}
	}
	if = {
		limit = {
			is_landed = no
			NOT = { exists = scope:$RELATION$ }
			OR = {
				has_father = no
				father = { is_landed = no }
			}
			OR = {
				has_mother = no
				mother = { is_landed = no }
			}
			exists = liege
			NOT = { this = liege }
		}
		liege = {
			every_vassal = {
				limit = {
					any_child = {
						save_good_$RELATION$_character_trigger_check = yes
					}
				}
				every_child = {
					limit = {
						save_good_$RELATION$_character_trigger_check = yes
					}
					add_to_list = good_child_relation_character
				}
			}
		}
	}
	if = {
		limit = {
			is_landed = no
			NOT = { exists = scope:$RELATION$ }
			OR = {
				has_father = no
				father = { is_landed = no }
			}
			OR = {
				has_mother = no
				mother = { is_landed = no }
			}
			exists = liege
			NOT = { this = liege }
		}
		liege = {
			every_courtier_or_guest = {
				limit = {
					save_good_$RELATION$_character_trigger_check = yes
				}
				add_to_list = good_child_relation_character
			}
		}
	}

	if = {
		limit = {
			NOT = { exists = scope:$RELATION$ }
			exists = liege
			NOT = { this = liege }
		}
		liege = {
			every_vassal = {
				limit = {
					save_good_$RELATION$_character_trigger_check = yes
				}
				add_to_list = good_child_relation_character
			}
		}
	}

	if = {
		limit = {
			NOT = { exists = scope:$RELATION$ }
			exists = liege
			NOT = { this = liege }
		}
		liege = {
			every_vassal = {
				limit = {
					any_child = {
						save_good_$RELATION$_character_trigger_check = yes
					}
				}
				every_child = {
					limit = {
						save_good_$RELATION$_character_trigger_check = yes
					}
					add_to_list = good_child_relation_character
				}
			}
		}
	}

	if = {
		limit = {
			NOT = { exists = scope:$RELATION$ }
			exists = liege
			NOT = { this = liege }
		}
		liege = {
			every_courtier_or_guest = {
				limit = {
					save_good_$RELATION$_character_trigger_check = yes
				}
				add_to_list = good_child_relation_character
			}
		}
	}

	if = {
		limit = {
			NOT = { exists = scope:$RELATION$ }
			exists = host
			NOT = { this = host }
		}
		host = {
			every_vassal = {
				limit = {
					save_good_$RELATION$_character_trigger_check = yes
				}
				add_to_list = good_child_relation_character
			}
		}
	}

	if = {
		limit = {
			NOT = { exists = scope:$RELATION$ }
			exists = host
			NOT = { this = host }
		}
		host = {
			every_vassal = {
				limit = {
					any_child = {
						save_good_$RELATION$_character_trigger_check = yes
					}
				}
				every_child = {
					limit = {
						save_good_$RELATION$_character_trigger_check = yes
					}
					add_to_list = good_child_relation_character
				}
			}
		}
	}

	if = {
		limit = {
			NOT = { exists = scope:$RELATION$ }
			exists = host
			NOT = { this = host }
		}
		host = {
			every_courtier_or_guest = {
				limit = {
					save_good_$RELATION$_character_trigger_check = yes
				}
				add_to_list = good_child_relation_character
			}
		}
	}

	if = {
		limit = {
			NOT = { exists = scope:$RELATION$ }
		}
		#To actually pick the relation
		random_in_list = {
			list = good_child_relation_character
			limit = {
				is_vassal_of = root
			}
			alternative_limit = {
				is_courtier_of = root
			}
			alternative_limit = {
				exists = liege
				is_primary_heir_of = liege
			}
			alternative_limit = {
				exists = liege
				is_heir_of = liege
			}
			alternative_limit = {
				always = yes
			}
			weight = {
				base = 1
				modifier = {
					add = 2
					is_powerful_vassal_of = root
				}
				modifier = {
					add = 1
					exists = root.liege
					is_vassal_of = root.liege
				}
				modifier = {
					add = 1
					exists = root.liege
					any_parent = {
						is_vassal_of = root.liege
					}
				}
				modifier = {
					add = 4
					age >= root.age_dif_child_down
					age <= root.age_dif_child_up
				}
				modifier = {
					add = -0.5
					exists = scope:crush_relation
					root = { has_sexuality = none }
					OR = {
						AND = {
							is_female = yes
							root = { is_female = yes }
						}
						AND = {
							is_male = yes
							root = { is_male = yes }
						}
					}
				}
			}
			save_scope_as = $SCOPE$
		}
	}
}

send_event_about_player_heir_childhood_personality_effect = {
	every_heir_title = {
		limit = {
			exists = holder
			holder = {
				is_ai = no
				exists = player_heir
				player_heir = scope:personality_child
				NOT = { is_in_list = childhood_personality_event }
			}
			is_title_created = yes #Since partition succession may result in uncreated titles having heirs but not holders.
		}
		holder = {
			add_to_list = childhood_personality_event
		}
	}

	every_in_list = {
		list = childhood_personality_event
		trigger_event = child_personality.$ID$
	}
}