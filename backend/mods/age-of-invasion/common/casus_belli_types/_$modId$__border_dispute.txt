_$modId$__border_dispute_cb = {
    icon = county_conquest_cb
    group = conquest
    war_name = _$modId$__border_dispute_cb

    combine_into_one = yes
    should_show_war_goal_subview = yes
    mutually_exclusive_titles = { always = yes }

    truce_days = 100
    white_peace_possible = no
    ai_only_against_neighbors = yes

    allowed_for_character = {
        is_independent_ruler = yes
        highest_held_title_tier >= tier_county
        OR = {
            AND = {
                calc_true_if = {
                    amount >= 1
                    has_trait = greedy
                    has_trait = arrogant
                    has_trait = fickle
                    has_trait = ambitious
                    has_trait = arbitrary
                    has_trait = callous
                    has_trait = sadistic
                }
                NOT = {
                    has_trait = just
                }
            }
            AND = {
                scope:attacker = {
                    is_ai = no
                }
                has_game_rule = _$modId$__player_not_limited
            }
        }
    }

    target_titles = neighbor_land_or_water
    target_title_tier = county

    attacker_score_from_occupation_scale = 150
    attacker_score_from_battles_scale = 150
    defender_score_from_battles_scale = 150

    valid_to_start = {
        scope:target = {
            tier = tier_county
        }
    }

    should_invalidate = {
        NOT = {
            any_in_list = {
                list = target_titles
                any_in_de_jure_hierarchy = {
                    tier = tier_county
                    holder = {
                        OR = {
                            this = scope:defender
                            target_is_liege_or_above = scope:defender
                        }
                    }
                }
            }
        }
    }

    on_invalidated_desc = _$modId$__border_dispute_invalidated_message
    on_invalidated = {}

    cost = {
        piety = {
            value = 0
            if = {
                limit = {
                    scope:defender.faith = scope:attacker.faith
                }
                add = {
                    value = medium_piety_value
                    desc = CB_SAME_FAITH_COST
                }
            }
            multiply = common_cb_piety_cost_multiplier
        }
        prestige = {
            value = 0
            if = {
                limit = {
                    NOT = { scope:defender.faith = scope:attacker.faith }
                }
                add = {
                    value = medium_prestige_value
                    desc = CB_COST_DIFFERENT_FAITH
                }
            }
            multiply = common_cb_prestige_cost_multiplier
        }
    }

    on_declaration = {
        on_declared_war = yes
        scope:attacker = {
            add_dread = medium_dread_gain
        }
    }

    on_victory_desc = {
        first_valid = {
            triggered_desc = {
                trigger = { scope:attacker = { is_local_player = yes } }
                desc = _$modId$__border_dispute_cb_victory_desc_attacker
            }
            desc = _$modId$__border_dispute_cb_victory_desc_attacker
        }
    }

    on_victory = {
        scope:attacker = { show_pow_release_message_effect = yes }

        # Legitimacy
        add_legitimacy_attacker_victory_effect = yes

        #EP2 accolade glory gain for winning against higher ranked enemy
        scope:attacker = { accolade_attacker_war_end_glory_gain_low_effect = yes }

        scope:attacker = {
            add_tyranny = medium_tyranny_gain
            create_title_and_vassal_change = {
                type = conquest
                save_scope_as = change
                add_claim_on_loss = yes
            }

            every_in_list = {
                list = target_titles
                custom_tooltip = CONQUEST_CB_TITLE
                every_in_de_jure_hierarchy = {
                    continue = {
                        OR = {
                            NOT = {
                                exists = holder
                            }
                            NOT = {
                                holder = {
                                    target_is_liege_or_above = scope:defender
                                }
                            }
                            AND = {
                                scope:attacker.faith = {
                                    faith_hostility_level_comparison = {
                                        prev.holder.faith <= scope:defender.faith
                                    }
                                }
                                holder = {
                                    OR = {
                                        this = scope:defender
                                        target_is_liege_or_above = scope:defender
                                    }
                                }
                            }
                        }
                        tier > tier_county
                    }
                    limit = {
                        tier = tier_county
                        exists = holder
                        holder = {
                            OR = {
                                this = scope:defender
                                target_is_liege_or_above = scope:defender
                            }
                        }
                    }
                    if = {
                        limit = {
                            OR = {
                                scope:attacker.faith = {
                                    faith_hostility_level_comparison = { prev.holder.faith >= scope:defender.faith }
                                }
                                holder.primary_title.tier >= scope:attacker.primary_title.tier
                            }
                        }
                        add_to_temporary_list = titles_taken
                    }
                    else = {
                        holder = { add_to_temporary_list = vassals_taken }
                    }
                }
            }
            every_in_list = {
                list = titles_taken
                change_title_holder = {
                    holder = scope:attacker
                    change = scope:change
                    take_baronies = yes
                }
            }
            every_in_list = {
                list = vassals_taken
                change_liege = {
                    liege = scope:attacker
                    change = scope:change
                }
            }

            resolve_title_and_vassal_change = scope:change

            ## Grab the appropriate duchy for future independence checks.
            random_in_list = {
                list = target_titles
                limit = { tier = tier_duchy }
                save_scope_as = target_duchy
            }

            ## Create the duchy if it doesn't already exist
            if = {
                limit = {
                    any_in_list = {
                        list = target_titles
                        tier = tier_duchy
                        is_title_created = no
                    }
                }
                random_in_list = {
                    list = target_titles
                    limit = { tier = tier_duchy }
                    save_scope_as = new_duchy
                }
                create_title_and_vassal_change = {
                    type = created
                    save_scope_as = change
                    add_claim_on_loss = no
                }
                scope:new_duchy = {
                    change_title_holder = {
                        holder = scope:attacker
                        change = scope:change
                    }
                }
                resolve_title_and_vassal_change = scope:change
            }
            ## Usurp it if it already exists
            else_if = {
                limit = {
                    any_in_list = {
                        list = target_titles
                        tier = tier_duchy
                        holder = {
                            OR = {
                                this = scope:defender
                                any_liege_or_above = { this = scope:defender }
                            }
                        }
                    }
                }
                random_in_list = {
                    list = target_titles
                    # No need to check all triggers, since there'll only ever be one duchy in the list.
                    limit = { tier = tier_duchy }
                    save_scope_as = new_duchy
                }
                create_title_and_vassal_change = {
                    type = usurped
                    save_scope_as = change
                    add_claim_on_loss = yes
                }
                scope:new_duchy = {
                    change_title_holder = {
                        holder = scope:attacker
                        change = scope:change
                    }
                }
                resolve_title_and_vassal_change = scope:change
            }
        }

        every_in_list = {
            list = target_titles
            change_title_holder = {
                holder = scope:attacker
                change = scope:change
            }
        }

        # Prestige removal for the Attacker
        every_in_list = {
            list = target_titles
            scope:attacker = {
                add_prestige_experience = {
                    value = medium_prestige_value
                    multiply = -1.0
                }
            }
        }

        # Piety removal for the Attacker, to due braking rules of Pope
        every_in_list = {
            list = target_titles
            scope:attacker = {
                add_piety = {
                    value = minor_piety_value
                    multiply = -2.0
                }
            }
        }

        # Prestige for the defender's war allies
        add_from_contribution_defenders = {
            prestige = minor_prestige_value
            opinion = {
                modifier = contributed_in_war
            }
        }
        add_truce_attacker_victory_effect = yes
    }

    attacker_ticking_warscore_delay = { months = 12 }    # How much ticking War Score should be delayed before increasing for the Attacker
    defender_ticking_warscore_delay = { months = 6 }    # How much ticking War Score should be delayed before increasing for the Defender
    attacker_ticking_warscore = 0.1                        # How much ticking warscore increases every day for the attacker
    defender_ticking_warscore = 0.1                        # How much ticking warscore increases every day for the Defender
    attacker_wargoal_percentage = 0.75                    # How much the Attacker need to occupy of a wargoal to gain ticking War Score. 0.0 means "at least one occupation"
    defender_wargoal_percentage = 0.75                    # How much the Defender need to occupy of a wargoal to gain ticking War Score. 0.0 means "at least one occupation"
    attacker_score_from_occupation_scale = 150            # War Score from occupation by the Attacker is modified by this value
    defender_score_from_occupation_scale = 150            # War Score from occupation by the defender is modified by this value
    attacker_score_from_battles_scale = 40                # War Score from battles won by the Attacker is modified by this value
    defender_score_from_battles_scale = 50                # War Score from battles won by the Defender is modified by this value
    max_attacker_score_from_battles = 20                # How much War Score the Attacker can gain from battles in total
    max_defender_score_from_battles = 70                # How much War Score the Defender can gain from battles in total
    max_attacker_score_from_occupation = 150            # How much War Score the Attacker can gain from occupation in total
    max_defender_score_from_occupation = 100            # How much War Score the Defender can gain from occupation in total
    full_occupation_by_defender_gives_victory = no        # Full occupation by the defender won't automatically give 100% warscore
    full_occupation_by_attacker_gives_victory = yes    # Full occupation by the attacker won't automatically give 100% warscore

    attacker_capital_gives_war_score = no                # No warscore from attacker capital
    defender_capital_gives_war_score = yes                # Warscore from defender capital
    imprisonment_by_attacker_give_war_score = no        # No warscore when the attackers imprisons people
    imprisonment_by_defender_give_war_score = yes        # Warscore when the defenders imprisons people

    on_primary_attacker_death = invalidate
    on_primary_defender_death = inherit

    on_white_peace_desc = {
        first_valid = {
            triggered_desc = {
                trigger = { scope:defender = { is_local_player = yes } }
                desc = vassalization_cb_white_peace_desc_defender
            }
            desc = vassalization_cb_white_peace_desc
        }
    }

    on_white_peace = {
        scope:attacker = { show_pow_release_message_effect = yes }
        # Prestige loss for the attacker
        scope:attacker = {
            add_prestige = {
                value = minor_prestige_value
                multiply = -1.0
            }
            stress_impact = {
                ambitious = medium_stress_impact_gain
                arrogant = medium_stress_impact_gain
            }
        }

        # Prestige for the attacker's war allies
        add_from_contribution_attackers = {
            prestige = minor_prestige_value
            opinion = {
                modifier = contributed_in_war
            }
        }

        # Prestige for the defender's war allies
        add_from_contribution_defenders = {
            prestige = minor_prestige_value
            opinion = {
                modifier = contributed_in_war
            }
        }

        scope:defender = {
            stress_impact = {
                arrogant = medium_stress_impact_gain
            }
        }

        # Truce
        add_truce_white_peace_effect = yes


        # Prestige for the defender's war allies
        add_from_contribution_defenders = {
            prestige = medium_prestige_value
            opinion = {
                modifier = contributed_in_war
            }
        }

        scope:defender = {
            stress_impact = {
                arrogant = medium_stress_impact_gain
            }
        }

        add_truce_white_peace_effect = yes
    }

    on_defeat_desc = {
        first_valid = {
            triggered_desc = {
                trigger = { scope:defender = { is_local_player = yes } }
                desc = _$modId$__border_dispute_cb_defeat_desc
            }
            triggered_desc = {
                trigger = {
                    scope:attacker = {
                        is_local_player = yes
                        has_targeting_faction = yes
                    }
                }
                desc = _$modId$__border_dispute_cb_defeat_desc
            }
            desc = _$modId$__border_dispute_cb_defeat_desc
        }
    }

    on_defeat = {
        scope:attacker = { show_pow_release_message_effect = yes }

        # Legitimacy
        add_legitimacy_attacker_defeat_effect = yes

        #EP2 accolade glory gain for winning against higher ranked enemy
        scope:defender = { accolade_defender_war_end_glory_gain_low_effect = yes }

        # Prestige loss for the attacker
        scope:attacker = {
            pay_short_term_gold = {
                gold = 10
                target = scope:defender
                yearly_income = yes
            }
            add_prestige = {
                value = major_prestige_value
                multiply = -1.5
            }
        }

        # Prestige for the defender
        scope:defender = {
            add_prestige = {
                value = medium_prestige_value
            }
        }

        # Prestige for the defender's war allies
        add_from_contribution_defenders = {
            prestige = major_prestige_value
            opinion = {
                modifier = contributed_in_war
            }
        }

        scope:attacker = {
            save_temporary_scope_as = loser
        }

        # Truce
        add_truce_attacker_defeat_effect = yes

        on_lost_aggression_war_discontent_loss = yes
    }
}
